import asyncio
from solana.rpc.async_api import AsyncClient
from solders.pubkey import Pubkey
import base64 # –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
RPC_URL = "https://solana-rpc.publicnode.com"
MARKET_ACCOUNT_ADDRESS = Pubkey.from_string("GQsPr4RJk9AZkkfWHud7v4MtotcxhaYzZHdsPCg9vNvW")
TRUMP_MINT = Pubkey.from_string("6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN") # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pubkey –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
WSOL_MINT = Pubkey.from_string("So11111111111111111111111111111111111111112") # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pubkey –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

async def get_market_raw_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Raydium Market.
    """
    async with AsyncClient(RPC_URL) as client:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_account_info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∞–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        # –£–±–∏—Ä–∞–µ–º encoding="jsonParsed", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        resp = await client.get_account_info(
            MARKET_ACCOUNT_ADDRESS,
            # encoding="base64" # base64 —ç—Ç–æ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        )

        if not resp.value:
            print(f"–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç {MARKET_ACCOUNT_ADDRESS} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None

        # resp.value.data —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        # –û–±—ã—á–Ω–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ [base64_string, encoding_type]
        raw_data_encoded = resp.value.data

        if isinstance(raw_data_encoded, list) and raw_data_encoded[1] == 'base64':
            raw_data_bytes = base64.b64decode(raw_data_encoded[0])
            print(f"–ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ({len(raw_data_bytes)} –±–∞–π—Ç).")
            # print("–ü–µ—Ä–≤—ã–µ 50 –±–∞–π—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", raw_data_bytes[:50]) # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return raw_data_bytes
        else:
             print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", raw_data_encoded)
             return None


async def get_trump_price():
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É TRUMP –≤ WSOL, –¥–µ–∫–æ–¥–∏—Ä—É—è —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ Market Account.
    """
    while True:
        try:
            raw_data = await get_market_raw_data()

            if raw_data:
                # --- –°–ê–ú–ê–Ø –°–õ–û–ñ–ù–ê–Ø –ß–ê–°–¢–¨ ---
                # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å `raw_data` (–æ–±—ä–µ–∫—Ç bytes)
                # —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö Raydium Concentrated Liquidity Market Account.
                # Raydium –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–∏—Ö –ø—É–ª–æ–≤.
                # –ß—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —Ä–µ–∑–µ—Ä–≤—ã WSOL –∏ TRUMP, –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Å–º–µ—â–µ–Ω–∏—è (offsets)
                # –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–∏—Ö –±–∞–π—Ç–∞—Ö.

                # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Raydium Market Account,
                # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π Raydium Program –∏–ª–∏ –∏—Ö SDK.
                # –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ –ø–æ–ª–µ–π.

                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã —Ä–µ–∑–µ—Ä–≤—ã –±—ã–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–≤—É–º—è uint64 –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏—è—Ö:
                # import struct
                # try:
                #     # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç—ã - –ù–ï–í–ï–†–ù–û –¥–ª—è Raydium Market!
                #     wsol_reserve_raw = struct.unpack_from("<Q", raw_data, offset=reserve1_offset)[0]
                #     trump_reserve_raw = struct.unpack_from("<Q", raw_data, offset=reserve2_offset)[0]
                #     # –í–∞–º —Ç–∞–∫–∂–µ –Ω—É–∂–Ω—ã –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≥–¥–µ-—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö
                #     wsol_decimals = ... # –ò–∑–≤–ª–µ—á—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–Ω–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ
                #     trump_decimals = ... # –ò–∑–≤–ª–µ—á—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–Ω–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ
                #
                #     wsol_reserve = wsol_reserve_raw / (10 ** wsol_decimals)
                #     trump_reserve = trump_reserve_raw / (10 ** trump_decimals)
                #
                #     if trump_reserve > 0 and wsol_reserve > 0:
                #         price = wsol_reserve / trump_reserve
                #         print(f"üí∞ –¶–µ–Ω–∞ TRUMP: {price:.8f} WSOL (–ø–æ —Å—ã—Ä—ã–º —Ä–µ–∑–µ—Ä–≤–∞–º)")
                #     else:
                #         print("‚ö†Ô∏è –†–µ–∑–µ—Ä–≤—ã TRUMP –∏–ª–∏ WSOL –≤ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–ª–µ–≤—ã–µ.")
                # except Exception as decode_error:
                #     print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {decode_error}")
                #     print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–º–µ—â–µ–Ω–∏—è.")

                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Raydium Market, –Ω–æ –∏—Ö –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö Raydium.")
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –ø–æ —Å—ã—Ä—ã–º –¥–∞–Ω–Ω—ã–º –±–µ–∑ –ª–æ–≥–∏–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Raydium.")

            else:
                # –≠—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ get_market_raw_data –≤–µ—Ä–Ω—É–ª–∞ None
                pass # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ get_market_raw_data

        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            # print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        await asyncio.sleep(5) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

if __name__ == "__main__":
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ solana: pip install solana
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–æ–º Python
    asyncio.run(get_trump_price())